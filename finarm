#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# finarm - Financial Armageddon
# Keeps track of the value of a currency and precious metals portfolio using
# prices retrieved from Yahoo Finance.

# Copyright 2016 Andrea Chiavazza
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Just enter the amount of assets you own below.
# Look at the options below for further customizations.
# The only accepted command-line argument is -q to print only the quotes and
# not the portfolio.

# If you find this program useful, you can donate to the
# bitcoin address 12f1khXXGp6vW6NizjRdfTgZDGWJdrna8i

########################### USER EDITABLE VARIABLES ############################

# Quantities of currencies in the portfolio.
# The metals defined by ISO 4217 are:
# XAU (gold), XAG (silver), XPD (palladium), XPT (platinum)
# XBT (bitcoin) is being evaluated for inclusion in the ISO 4217 standard.
# For all currency symbols see: http://en.wikipedia.org/wiki/ISO_4217
# Currency quantities must be defined by a number.
# Metal quatities must be defined by a map of weight units to quatities.
XAU_G =  (20 * 1 +
          10 * 1 +
           1 * 1)

XAG_G = (1000 * 1 +
          100 * 1)

PORTFOLIO = {
    'XAU': {'g': XAU_G, 'ozt': 1},
    'XAG': {'g': XAG_G, 'ozt': 1},
    'XBT': 1,
    'GBP': 100,
}

# Weight units for the metal quantities in the portfolio.
# Allowed values are: 'mg' 'g' 'kg' 't' 'ozt'.
WEIGHT_UNITS = ('g', )

# Which currencies to use for the displayed prices.
PRICE_CURS = ('USD', 'EUR', 'GBP', )

# Which currencies to use to compute the total value of the portfolio.
# '%' will print the percentages of the assets computed using the first currency in the list.
VALUE_CURS = ('%', 'USD', 'EUR', 'GBP', 'XBT', 'XAU', )

# Whether to display the currencies from highest to lowest of their value in the portfolio.
DISPLAY_HIGHEST_TO_LOWEST = True

# How many significant digits to use for all displayed values.
SIGNIF_DIGITS = 4

# Separator used to separate the fractional part.
FRACT_SEPARATOR = "."

# Separator used to group the thousands. Use "" to have no thousand separators.
THOUSAND_SEPARATOR = "'"

# Characters that separate the table columns.
COLUMNS_GAP = '  '

# Maximum quotes or ratios to display on a line.
MAX_PER_LINE = 6

# Names to use for the columns labels.
SYMBOL_LABEL = 'SYM'
QUANTITY_LABEL = 'QTY'
PRICE_LABEL = 'PRICE'
VALUE_LABEL = 'VALUE'
WEIGHT_LABEL = 'WEIGHT'

# Which columns should have a sum of all values displayed at the bottom.
COLUMNS_WITH_TOTAL = (WEIGHT_LABEL, VALUE_LABEL)

# An alternative name that will map to the name as used by Yahoo finance.
ALIASES = {
    'XBT': 'BTC'
}

# Ratios to be displayed.
RATIOS = (
    ('XAU', 'XAG'),
    ('XBT', 'XAU'),
    ('XPT', 'USD'),
    ('XPD', 'USD'),
    ('EUR', 'USD'),
    ('USD', 'CNY'),
    ('GBP', 'EUR'),
    ('GBP', 'USD'),
    ('USD', 'JPY'),
    ('USD', 'SEK'),
)

from collections import OrderedDict

# Quotes, mapped to more user-friendly names.
QUOTES = OrderedDict((
    ('DX-Y.NYB',   'USDX'),
    ('^IRX',       'USTNO13W'),
    ('^FVX',       'USTNO5Y'),
    ('^TNX',       'USTNO10Y'),
    ('^TYX',       'USTNO30Y'),
    ('GBTC',       'GBTC'),
    ('^NYXBT',     'NYXBT'),
    ('^VIX',       'VIX'),
    ('^SPG1200',   'S&P1200'),
    ('^GSPC',      'S&P500'),
    ('^IXIC',      'NASDAQ'),
    ('^HSI',       'HSI'),
    ('^N225',      'Nikkei225'),
    ('^STOXX50E',  'ESTX50EUR'),
    ('^GDAXI',     'DAX'),
    ('^FTSE',      'FTSE100'),
    ('^FCHI',      'CAC40'),
    ('FTSEMIB.MI', 'MIB'),
    ('FTSE.AT',    'ATHEX'),
    ('AAPL',       'AAPL'),
    ('GOOG',       'GOOG'),
    ('MSFT',       'MSFT'),
    ('AMZN',       'AMZN'),
    ('FB',         'FB'),
    ('FCAU',       'FCAU'),
    ('^XAU',       'Miners'),
    ('^SPGSCI',    'SP-CI'),
))

# The format is ((prefix, suffix, months), alias).
# The "months" parameter is optional and specifies the months of the year when
# the future is available. If not specified, it means all months.
# The letters for the 12 months are, in the order, FGHJKMNQUVXZ.
FUTURES = OrderedDict((
    (('ES',  '.CME', 'HMUZ'),     'S&PFut'),
    (('GI',  '.CME'),             'GS-CI'),
    (('CL',  '.NYM'),             'Oil'),
    (('NG',  '.NYM'),             'Gas'),
    (('GC',  '.CMX'),             'Gold'),
    (('SI',  '.CMX'),             'Silver'),
    (('PL',  '.NYM'),             'Platinum'),
    (('PA',  '.NYM'),             'Palladium'),
    (('ALI', '.CMX'),             'Aluminum'),
    (('HG',  '.CMX'),             'Copper'),
    (('C',   '.CBT', 'HKNUZ'),    'Corn'),
    (('O',   '.CBT', 'HKNUZ'),    'Oats'),
    (('RR',  '.CBT', 'FHKNUX'),   'Rice'),
    (('SM',  '.CBT', 'FHKNQUVZ'), 'SoyM'),
    (('BO',  '.CBT', 'FHKNQUVZ'), 'SoyO'),
    (('S',   '.CBT', 'FHKNQUX'),  'Soy'),
    (('LC',  '.CME', 'GJMQVZ'),   'L.Cattle'),
    (('FC',  '.CME', 'FHJKQUVX'), 'F.Cattle'),
    (('LH',  '.CME', 'GJKMNQVZ'), 'Hogs'),
    (('CT',  '.NYB', 'HKNVZ'),    'Cotton'),
    (('KC',  '.NYB', 'HKNUZ'),    'Coffee'),
    (('CC',  '.NYB', 'HKNUZ'),    'Cocoa'),
    (('LB',  '.CME', 'FHKNUX'),   'Lumber'),
    (('OJ',  '.NYB', 'FHKNUX'),   'OJ'),
    (('SB',  '.NYB', 'HKNV'),     'Sugar'),
))

######################## END OF USER EDITABLE VARIABLES ########################

# All user variables can be redefined in a file called 'finarm-data.py' in the
# user home folder.
import os
try:
    with open(os.path.join(os.path.expanduser('~'), 'finarm-data.py')) as f:
        exec(f.read())
except OSError:
    pass

# Symbols that represent metals.
METALS = frozenset(('XAG', 'XAU', 'XPD', 'XPT'))

# Weight unit for the prices given by the echanges.
PRICE_WEIGHT_UNIT = 'ozt'

# Character to be used for the lines that separate the totals.
# Try '\u2012' for a better looking line.
LINE_CHAR = '-'

# This constant is created to avoid running the same code many times.
TRANS = str.maketrans(dict((() if FRACT_SEPARATOR    == '.'
                            else (('.', FRACT_SEPARATOR),)) +
                           (() if THOUSAND_SEPARATOR == ','
                            else ((',', THOUSAND_SEPARATOR),))))

################################################################################

import json, itertools, time
from decimal import Decimal as D
from fractions import Fraction as F
from urllib.request import Request, urlopen
from urllib.parse import urlencode
from functools import partial, lru_cache, reduce

# Partitions a collection coll in slices of size n.
def partition(coll, n):
    return tuple(coll[i:i+n] for i in range(0, len(coll), n))

# Returns the amount of grams in the named unit.
@lru_cache()
def toGram(unit):
    table = {'mg' :       '0.001',
             'g'  :       '1',
             'kg' :    '1000',
             't'  : '1000000',
             'ozt':      '31.1034768'}
    if unit not in table:
        raise Exception('Invalid weight unit \'' + unit + '\'')
    return F(table[unit])

# Valid names are: mg g kg t ozt.
def convertWeight(val, fromName, toName):
    fromNameLC = fromName.lower()
    toNameLC = toName.lower()
    return val * (toGram(fromNameLC) / toGram(toNameLC))

# The only function that exchanges data with the net.
def retrieveData(url):
    maxtries = 5
    for i in range(1, maxtries):
        try:
            print(str(len(url)), end=' B sent', flush=True)
            response = urlopen(Request(url,
                                       headers = {'User-Agent': 'https://github.com/andrea-chiavazza/finarm'}))
            data = str(response.read(), encoding = 'utf-8')
            print(' / ' + str(len(data)) + ' B received')
            return data
        except Exception as e:
            print('\n' + str(e) + ' - try(' + str(i) + '/' + str(maxtries) + ')')
            time.sleep(2)

# Returns the amount of symbol in the portfolio, to the given unit if it's a metal.
def getPortfolioQuantity(portfolio, symbol, toUnit, metals):
    if symbol not in portfolio:
        return F(0)
    vals = portfolio[symbol]
    if symbol in metals:
        return sum(convertWeight(F(qty), unit, toUnit)
                   for unit, qty in vals.items())
    else:
        return F(vals)

# Returns the fractional digits required for a number n to have the given significant digits.
def significantDigits(n, signif):
    intlength = len(str(int(abs(n))))
    return (signif - intlength) if signif > intlength else 0

# Formats a Fraction with the given fractional digits.
def formatFract(val, fractDigits, trans):
    if val == 0:
        return ''
    if isinstance(val, F):
        return ('{:,.' + str(fractDigits) + 'f}').format(D(val.numerator) / D(val.denominator)).translate(trans)
    else:
        raise Exception('Unsupported type for value \'' + str(val) + '\'')

# Formats a number with the given significant digits.
def formatSignif(n, signif, trans):
    return formatFract(n, significantDigits(n, signif), trans)

# Returns a map of symbols to Fraction with the prices retrieved from Yahoo Finance.
def getYahooQuotes(ratios, quotes, aliases):
    symbols = tuple(makeYahooSymbolRatio(ratioNum, ratioDen, aliases)
                    for ratioNum, ratioDen in ratios) \
              + quotes
    params = {'q': 'select Symbol,LastTradePriceOnly from yahoo.finance.quotes where symbol in ("' +
                   ','.join(symbols) + '")',
              'env': 'store://datatables.org/alltableswithkeys',
              'format': 'json'}
    text = retrieveData('https://query.yahooapis.com/v1/public/yql?' + urlencode(params))
    data = json.loads(text)['query']['results']['quote']
    return {entry['Symbol']: F(entry.get('LastTradePriceOnly') or 0)
            for entry in data}

# Returns the Yahoo symbol for a ratio of 2 symbols.
def makeYahooSymbolRatio(sym1, sym2, aliases):
    return aliases.get(sym1, sym1) + aliases.get(sym2, sym2) + '=X'

# Returns a map of Yahoo symbols to their current prices.
def getPrices(portfolio, priceCurs, valueCurs, ratios, quotes, aliases):
    ratiosNeeded = frozenset(itertools.product(portfolio.keys(),
                                               priceCurs + valueCurs)) \
                   | frozenset(ratios)
    prices = getYahooQuotes(tuple(ratio for ratio in ratiosNeeded
                                  if ratio[0] != ratio[1]),
                            tuple(quotes.keys()),
                            aliases)
    prices.update({makeYahooSymbolRatio(ratioNum, ratioDen, aliases): F(1)
                   for (ratioNum, ratioDen) in ratiosNeeded
                   if ratioNum == ratioDen})
    return prices

# Returns a column as a tuple of strings.
# data must be {sym: F}
def formatColumn(title, data, signif, sortedSymbols, columns_with_total, line_char, trans):
    titles = tuple(title.split())
    isPct = len(titles) > 1 and titles[1] == '%'
    hasTot = titles[0] in columns_with_total
    if isPct:
        tot = F(100)
        rowsData = {k: tot * data[k] / sum(data.values())
                    for k in data}
    else:
        if hasTot:
            tot = sum(data.values())
        rowsData = data
    if isPct or hasTot:
        fract = min(significantDigits(n, signif)
                    for n in (tuple(rowsData[sym] for sym in sortedSymbols) + (tot,)))
        rows = tuple(formatFract(rowsData[sym], fract, trans)
                     for sym in sortedSymbols)
    else:
        rows = tuple(formatSignif(rowsData[sym], signif, trans)
                     if isinstance(rowsData[sym], F) else rowsData[sym]
                     for sym in sortedSymbols)
    if hasTot:
        totSep = line_char
        totStr = formatFract(tot, fract, trans)
    else:
        totSep = ''
        totStr = ''
    maxsep = max(len(s) for s in rows + (totStr,))
    maxl = max((maxsep,) + tuple(len(s) for s in titles))
    return (tuple(s.rjust(maxl) for s in titles),) + \
           tuple(s.rjust(maxl) for s in rows + (totSep * maxsep, totStr))

# Returns a tuple of columns, where columns are tuples of strings.
# data can be {sym: F} or {cur: {sym: F}}
def formatColumns(title, data, signif, sortedSymbols, columns_with_total, line_char, trans):
    if not data:
        return ()
    if isinstance(tuple(data.values())[0], dict):
        return tuple(formatColumn(title + '\n' + unit, data[unit], signif, sortedSymbols,
                                  columns_with_total, line_char, trans)
                     for unit in data)
    else:
        return (formatColumn(title, data, signif, sortedSymbols, columns_with_total, line_char, trans),)

def convertPrice(qty, fromCur, toCur, symbolsToPrice, aliases):
    return qty * symbolsToPrice[makeYahooSymbolRatio(fromCur, toCur, aliases)]

def formatRatio(symbolsToPrice, signif, aliases, trans, ratio):
    return ratio[0] + '/' + ratio[1] + '=' + \
           formatSignif(symbolsToPrice[makeYahooSymbolRatio(ratio[0],
                                                            ratio[1],
                                                            aliases)],
                        signif,
                        trans)

def formatQuote(symbolsToPrice, signif, trans, quote):
    return quote[1] + '=' + formatSignif(symbolsToPrice[quote[0]], signif, trans)

def formatPrices(prices, formatter, columns, gap):
    if not prices:
        return ''
    fprices = tuple(formatter(price) for price in prices)
    return '\n'.join(gap.join(part)
                     for part in partition(fprices, columns)) + '\n'

def computeColumn(symbols, func, units):
    if units is None:
        return {sym: func(sym) for sym in symbols}
    else:
        if '%' in units:
            nonPctUnits = tuple(filter(lambda x: x != '%', units))
            if not nonPctUnits:
                raise Exception('Percentage can\'t be the only unit')
            shareUnit = nonPctUnits[0]
        return OrderedDict((unit, {sym: func(sym, shareUnit if unit == '%' else unit)
                                   for sym in symbols})
                           for unit in units)

def formatCols(portfolio, symbolsToPrice, prefs):
    symbols = tuple(portfolio.keys())

    @lru_cache()
    def getPrice(sym, cur):
        return convertPrice(F(1), sym, cur, symbolsToPrice, prefs.aliases)

    @lru_cache()
    def getQty(sym):
        return getPortfolioQuantity(portfolio, sym, prefs.price_weight_unit, prefs.metals)

    @lru_cache()
    def getWgt(sym, unit):
        return getPortfolioQuantity(portfolio, sym, unit, prefs.metals) \
               if sym in prefs.metals else F(0)

    @lru_cache()
    def getValue(sym, cur):
        return convertPrice(getQty(sym), sym, cur, symbolsToPrice, prefs.aliases)

    cols = ((prefs.symbol_label,   None,               lambda sym: sym),
            (prefs.price_label,    prefs.price_curs,   getPrice),
            (prefs.quantity_label, None,               getQty),
            (prefs.weight_label,   prefs.weight_units, getWgt),
            (prefs.value_label,    prefs.value_curs,   getValue))

    vcols = OrderedDict((col[0], computeColumn(symbols, col[2], col[1]))
                        for col in cols)

    if '%' in vcols[prefs.value_label]:
        sortCur = '%'
    else:
        sortCur = next(iter(vcols[prefs.value_label].keys()))

    sortedSymbols = tuple(sorted(symbols,
                                 key = lambda sym: vcols[prefs.value_label][sortCur][sym],
                                 reverse = prefs.display_highest_to_lowest))

    fcols = (formatColumns(col,
                           vcols[col],
                           prefs.signif_digits,
                           sortedSymbols,
                           prefs.columns_with_total,
                           prefs.line_char,
                           prefs.trans)
             for col in vcols)
    return reduce(lambda res, fcol: res + fcol, fcols)

def formatPortfolio(portfolio, symbolsToPrice, prefs):
    if not portfolio:
        return ''
    cols = formatCols(portfolio, symbolsToPrice, prefs)
    titles = tuple(col[0] for col in cols)
    titleRowsCount = max(len(title) for title in titles)
    # returns: titles + empty-line + rows
    return '\n'.join(prefs.columns_gap.join(title[titleRow] if len(title) > titleRow
                                            else ' ' * len(title[titleRow - 1])
                                            for title in titles)
                     for titleRow in range(0, titleRowsCount)) + \
           '\n\n' + \
           '\n'.join(prefs.columns_gap.join(col[row] for col in cols)
                     for row in range(1, len(cols[1]))) + '\n'

def formatAll(symbolsToPrice, portfolio, ratios, quotes, prefs):
    ratioFormatter = partial(formatRatio, symbolsToPrice, prefs.signif_digits, prefs.aliases, prefs.trans)
    quoteFormatter = partial(formatQuote, symbolsToPrice, prefs.signif_digits, prefs.trans)
    pricesStr = formatPrices(ratios, ratioFormatter, prefs.max_per_line, prefs.columns_gap) + \
                formatPrices(quotes.items(), quoteFormatter, prefs.max_per_line, prefs.columns_gap)
    portfolioStr = formatPortfolio(portfolio, symbolsToPrice, prefs)
    return '\n'.join(filter(len, (pricesStr, portfolioStr)))

import sys
from collections import namedtuple
from datetime import datetime

Prefs = namedtuple('Prefs',
                   ('weight_units', 'price_curs', 'value_curs', 'columns_with_total',
                    'display_highest_to_lowest', 'signif_digits', 'fract_separator',
                    'thousand_separator', 'columns_gap', 'max_per_line',
                    'symbol_label', 'quantity_label', 'price_label',
                    'value_label', 'weight_label', 'aliases', 'price_weight_unit',
                    'line_char', 'trans', 'metals'))

# Makes the Yahoo symbol of a future.
def makeFuture(prefix, suffix, y, m, months):
    monthCodes = 'FGHJKMNQUVXZ'
    if not months:
        months = monthCodes
    @lru_cache()
    def m2n(m): return monthCodes.find(m)
    futMonths = tuple(filter(lambda x: m2n(x) >= m, months))
    if futMonths:
        m = futMonths[0]
    else:
        m = months[0]
        y += 1
    return prefix + m + str(y % 100) + suffix

def makeFuturesQuotes(futures, y, m):
    return OrderedDict((makeFuture(k[0], k[1], y, m, k[2] if len(k) > 2 else None), futures[k])
                       for k in futures)

def makeNextFuturesQuotes(futures):
    now = datetime.now()
    return makeFuturesQuotes(futures, now.year, now.month)

def main():
    prefs = Prefs(WEIGHT_UNITS, PRICE_CURS, VALUE_CURS, COLUMNS_WITH_TOTAL, DISPLAY_HIGHEST_TO_LOWEST,
                  SIGNIF_DIGITS, FRACT_SEPARATOR, THOUSAND_SEPARATOR, COLUMNS_GAP,
                  MAX_PER_LINE, SYMBOL_LABEL, QUANTITY_LABEL, PRICE_LABEL,
                  VALUE_LABEL, WEIGHT_LABEL, ALIASES, PRICE_WEIGHT_UNIT, LINE_CHAR, TRANS, METALS)
    print(datetime.now().replace(microsecond = 0).isoformat(' '), end=' - ', flush=True)
    if '-q' in sys.argv:
        portfolio = {}
        ratios = tuple(sorted((a, b) for a in PORTFOLIO
                                     for b in filter(lambda c : c != '%', prefs.value_curs)
                                     if a != b and (a, b) not in RATIOS)) + \
                 RATIOS
    else:
        portfolio = PORTFOLIO
        ratios = RATIOS
    if portfolio:
        price_curs = prefs.price_curs
        value_curs = prefs.value_curs
    else:
        price_curs = ()
        value_curs = ()
    quotes = OrderedDict(QUOTES)
    quotes.update(makeNextFuturesQuotes(FUTURES))

    symbolsToPrice = getPrices(portfolio, price_curs, value_curs, ratios, quotes, prefs.aliases)
    fratios = ()
    for (a, b) in ratios:
        if (b, a) not in ratios or \
            symbolsToPrice[makeYahooSymbolRatio(a, b, prefs.aliases)] > \
            symbolsToPrice[makeYahooSymbolRatio(b, a, prefs.aliases)]:
                fratios = fratios + ((a, b),)

    print(formatAll(symbolsToPrice, portfolio, fratios, quotes, prefs), end='')

#################################### TESTS #####################################

def assertEquals(actual, expected):
    if actual != expected:
        raise Exception('\nexpected:\n"' + str(expected).replace('\n', '\\n\n') + '"\n' +
                        'but was:\n"' + str(actual).replace('\n', '\\n\n') + '"\n')

def runTests():
    weight_label = 'WEIGHT'
    value_label = 'VALUE'
    tprefs = Prefs(weight_units = ('g', 'kg'),
                   price_curs = ('USD', 'EUR', 'GBP'),
                   value_curs = ('%', 'USD', 'EUR', 'XBT'),
                   columns_with_total = (weight_label, value_label),
                   display_highest_to_lowest = True,
                   signif_digits = 4,
                   fract_separator = '.',
                   thousand_separator = "'",
                   columns_gap = '  ',
                   max_per_line = 2,
                   symbol_label = 'SYM',
                   quantity_label = 'QTY',
                   price_label = 'PRICE',
                   value_label = value_label,
                   weight_label = weight_label,
                   aliases = {'XBT': 'BTC'},
                   price_weight_unit = 'ozt',
                   line_char = '-',
                   trans = str.maketrans({',': "'"}),
                   metals = frozenset(('XAG', 'XAU', 'XPD', 'XPT')))

    prices = {'BTCUSD=X': F('418.9100'),
              'GBPBTC=X': F('0.0035'),
              'XAGEUR=X': F('13.0919'),
              'GBPGBP=X': F('1'),
              'BTCBTC=X': F('1'),
              'GBPEUR=X': F('1.3519'),
              'XAUBTC=X': F('2.5687'),
              'GBTC': F('62.88'),
              'BTCEUR=X': F('381.6771'),
              'XAUXAG=X': F('74.8869'),
              'XAUGBP=X': F('725.2653'),
              'DX-Y.NYB': F('97.984'),
              'XAUEUR=X': F('980.4111'),
              'EURUSD=X': F('1.0976'),
              'XAUUSD=X': F('1076.0500'),
              '^NYXBT': F('454.0813'),
              'XAGUSD=X': F('14.3690'),
              'BTCGBP=X': F('282.3480'),
              'XAGBTC=X': F('0.0343'),
              'BTCXAU=X': F('0.3893'),
              'XAGGBP=X': F('9.6848'),
              'GBPUSD=X': F(' 1.4838')}

    portfolio = {'XAU': {'g': 28, 'ozt': 2},
                 'XAG': {'kg': 2, 'ozt': 43},
                 'XBT': F('13.3'),
                 'GBP': F('2168')}

    ratios = (('XAU', 'XAG'),
              ('XBT', 'XAU'),
              ('EUR', 'USD'))

    quotes = OrderedDict((('GBTC',     'GBTC'),
                          ('^NYXBT',   'NYXBT'),
                          ('DX-Y.NYB', 'USDX')))

    assertEquals(makeFuture('C', '.CBT', 2016, 0, 'HKNUZ'), 'CH16.CBT')
    assertEquals(makeFuture('SM', '.CBT', 2016, 1, 'HKNUZ'), 'SMH16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 2, 'HKNUZ'), 'CH16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 3, 'HKNUZ'), 'CK16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 4, 'HKNUZ'), 'CK16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 5, 'HKNUZ'), 'CN16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 6, 'HKNUZ'), 'CN16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 7, 'HKNUZ'), 'CU16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 8, 'HKNUZ'), 'CU16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 9, 'HKNUZ'), 'CZ16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 10, 'HKNUZ'), 'CZ16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 11, 'HKNUZ'), 'CZ16.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 11, 'HKNU'), 'CH17.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 10, 'HKNU'), 'CH17.CBT')
    assertEquals(makeFuture('C', '.CBT', 2016, 10, None), 'CX16.CBT')
    assertEquals(makeFuturesQuotes(OrderedDict(((('C', '.CBT', 'HKNU'), 'Corn'),
                                                (('SM', '.CBT', 'HKNUZ'), 'SoyM'),
                                                (('HG',  '.CMX'), 'Copper'))),
                                   2016,
                                   3),
                 OrderedDict((('CK16.CBT', 'Corn'),
                              ('SMK16.CBT', 'SoyM'),
                              ('HGJ16.CMX', 'Copper'))))
    assertEquals(partition((2, 8, 7, 2, 3, 0, 9, 1, 8, 7, 10),
                           3),
                 ((2, 8, 7), (2, 3, 0), (9, 1, 8), (7, 10)))
    assertEquals(partition([2, 8, 7, 2, 3, 0, 9, 1, 8, 7, 10],
                           3),
                 ([2, 8, 7], [2, 3, 0], [9, 1, 8], [7, 10]))
    assertEquals(toGram('mg'), F('0.001'))
    assertEquals(toGram('g'), F('1'))
    assertEquals(toGram('kg'), F('1000'))
    assertEquals(toGram('t'), F('1000000'))
    assertEquals(toGram('ozt'), F('31.1034768'))
    assertEquals(convertWeight(F('2.3'), 'g', 'kg'), F('0.0023'))
    assertEquals(convertWeight(F('2.38'), 'ozt', 'kg'), F('0.074026274784'))
    assertEquals(convertWeight(F('2.38'), 'ozt', 'ozt'), F('2.38'))
    assertEquals(getPortfolioQuantity({'XBT': 23, 'XAU': {'g': 8, 'ozt': 2}},
                                      'XXX',
                                      'ozt',
                                      tprefs.metals),
                 F(0))
    assertEquals(getPortfolioQuantity({'XBT': 23, 'XAU': {'g': 8, 'ozt': 2}},
                                      'XBT',
                                      'ozt',
                                      tprefs.metals),
                 F(23))
    assertEquals(getPortfolioQuantity({'XBT': 23, 'XAU': {'g': 8, 'ozt': 2}},
                                      'XAU',
                                      'ozt',
                                      tprefs.metals),
                 F('43879346/19439673'))
    assertEquals(getPortfolioQuantity({'XBT': 23, 'XAU': {'g': 8, 'ozt': 2}},
                                      'XAU',
                                      'g',
                                      tprefs.metals),
                 F('70.2069536'))
    assertEquals(significantDigits(23.9, 4), 2)
    assertEquals(significantDigits(23.9, 6), 4)
    assertEquals(significantDigits(23, 6), 4)
    assertEquals(significantDigits(123, 3), 0)
    assertEquals(significantDigits(8123, 3), 0)
    assertEquals(significantDigits(8123, 6), 2)
    assertEquals(significantDigits(8123, 0), 0)
    assertEquals(significantDigits(99.98, 3), 1)
    assertEquals(significantDigits(99.98, 4), 2)
    assertEquals(significantDigits(9.8997, 4), 3)
    assertEquals(formatFract(F('2.98'), 5, tprefs.trans), '2.98000')
    assertEquals(formatFract(F('2.26'), 1, tprefs.trans), '2.3')
    assertEquals(formatFract(F('2.25'), 1, tprefs.trans), '2.2')
    assertEquals(formatFract(F('2.95'), 0, tprefs.trans), '3')
    assertEquals(formatFract(F('23882.95'), 0, tprefs.trans), "23'883")
    assertEquals(formatSignif(F('2.8'), 3, tprefs.trans), '2.80')
    assertEquals(formatSignif(F('92.8'), 3, tprefs.trans), '92.8')
    assertEquals(formatSignif(F('3392.8'), 3, tprefs.trans), "3'393")
    assertEquals(makeYahooSymbolRatio('EUR', 'USD', tprefs.aliases), 'EURUSD=X')
    assertEquals(makeYahooSymbolRatio('XBT', 'USD', tprefs.aliases), 'BTCUSD=X')
    assertEquals(
        formatColumn('VALUE\nUSD',
                     {'XAU': F('25258.00195184353152442430487'),
                      'XAG': F('4507.029573556921456446309564'),
                      'XBT': F('132440.0000'),
                      'GBP': F('21468.3800')},
                     tprefs.signif_digits,
                     ('XBT', 'XAU', 'GBP', 'XAG'),
                     tprefs.columns_with_total,
                     tprefs.line_char,
                     tprefs.trans),
        (('  VALUE', '    USD'), "132'440", " 25'258", " 21'468", "  4'507", '-------', "183'673"))
    assertEquals(
        formatColumns('VALUE',
                      OrderedDict((('USD', {'XAU': F('25258.00195184353152442430487'),
                                            'XAG': F('4507.029573556921456446309564'),
                                            'XBT': F('132440.0000'),
                                            'GBP': F('21468.3800')}),
                                   ('EUR', {'XAU': F('22977.48491554484481297602074'),
                                            'XAG': F('4100.099340106327920227876261'),
                                            'XBT': F('120482.2388'),
                                            'GBP': F('19529.8300')}),
                                   ('GBP', {'XAU': F('16648.10616873010158144121046'),
                                            'XAG': F('2970.691518040823011786257927'),
                                            'XBT': F('87294.1916'),
                                            'GBP': F('14150.0')}),
                                   ('XBT', {'XAU': F('58.73937536124193035551575379'),
                                            'XAG': F('10.47163231607856778249304914'),
                                            'XBT': F('308.0'),
                                            'GBP': F('49.5250')}),
                                   ('XAU', {'XAU': F('23.51550316715718417691491004'),
                                            'XAG': F('4.195157045882407589880755710'),
                                            'XBT': F('123.2924'),
                                            'GBP': F('19.8100')}))),
                      tprefs.signif_digits,
                      ('XBT', 'XAU', 'GBP', 'XAG'),
                      tprefs.columns_with_total,
                      tprefs.line_char,
                      tprefs.trans),
        ((('  VALUE', '    USD'), "132'440", " 25'258", " 21'468", "  4'507", '-------', "183'673"),
         (('  VALUE', '    EUR'), "120'482", " 22'977", " 19'530", "  4'100", '-------', "167'090"),
         (('  VALUE', '    GBP'), " 87'294", " 16'648", " 14'150", "  2'971", '-------', "121'063"),
         (('VALUE', '  XBT'), '308.0', ' 58.7', ' 49.5', ' 10.5', '-----', '426.7'),
         (('VALUE', '  XAU'), '123.3', ' 23.5', ' 19.8', '  4.2', '-----', '170.8')))
    assertEquals(
        formatColumns('VALUE',
                      OrderedDict((('USD', {'XAU': F('25258.00195184353152442430487'),
                                            'XAG': F('4507.029573556921456446309564'),
                                            'XBT': F('132440.0000'),
                                            'GBP': F('21468.3800')}),
                                   ('%',   {'XAU': F('25258.00195184353152442430487'),
                                            'XAG': F('4507.029573556921456446309564'),
                                            'XBT': F('132440.0000'),
                                            'GBP': F('21468.3800')}),
                                   ('EUR', {'XAU': F('22977.48491554484481297602074'),
                                            'XAG': F('4100.099340106327920227876261'),
                                            'XBT': F('120482.2388'),
                                            'GBP': F('19529.8300')}))),
                      tprefs.signif_digits,
                      ('XBT', 'XAU', 'GBP', 'XAG'),
                      tprefs.columns_with_total,
                      tprefs.line_char,
                      tprefs.trans),
        ((('  VALUE', '    USD'), "132'440", " 25'258", " 21'468", "  4'507", '-------', "183'673"),
         (('VALUE', '    %'), " 72.1", " 13.8", " 11.7", "  2.5", '-----', "100.0"),
         (('  VALUE', '    EUR'), "120'482", " 22'977", " 19'530", "  4'100", '-------', "167'090")))
    assertEquals(
        formatColumns('VALUE',
                      OrderedDict((('USD', {'XAU': F('25258.00195184353152442430487'),
                                            'XAG': F('4507.029573556921456446309564'),
                                            'XBT': F('132440.0000'),
                                            'GBP': F('21468.3800')}),
                                   ('%',   {'XAU': F('25258.00195184353152442430487'),
                                            'XAG': F('4507.029573556921456446309564'),
                                            'XBT': F('132440.0000'),
                                            'GBP': F('21468.3800')}),
                                   ('EUR', {'XAU': F('22977.48491554484481297602074'),
                                            'XAG': F('4100.099340106327920227876261'),
                                            'XBT': F('120482.2388'),
                                            'GBP': F('19529.8300')}))),
                      tprefs.signif_digits,
                      ('XBT', 'XAU', 'GBP', 'XAG'),
                      (),
                      tprefs.line_char,
                      tprefs.trans),
        ((('  VALUE', '    USD'), "132'440", " 25'258", " 21'468", "  4'507", '       ', '       '),
         (('VALUE', '    %'), " 72.1", " 13.8", " 11.7", "  2.5", '     ', '     '),
         (('  VALUE', '    EUR'), "120'482", " 22'977", " 19'530", "  4'100", '       ', '       ')))
    assertEquals(
        formatColumns('VALUE',
                      {},
                      tprefs.signif_digits,
                      ('XBT', 'XAU', 'GBP', 'XAG'),
                      tprefs.columns_with_total,
                      tprefs.line_char,
                      tprefs.trans),
        ())
    assertEquals(
        convertPrice(23, 'EUR', 'GBP', {'EURGBP=X': F('1.2')}, tprefs.aliases),
        F('27.6'))
    assertEquals(
        formatRatio({'EURUSD=X': F('1.2')},
                    tprefs.signif_digits,
                    tprefs.aliases,
                    tprefs.trans,
                    ('EUR', 'USD')),
        'EUR/USD=1.200')
    assertEquals(
        formatQuote({'^GSPC': F('1.2')}, tprefs.signif_digits, tprefs.trans, ('^GSPC', 'S&P500')),
        'S&P500=1.200')
    assertEquals(
        formatPrices((('EUR', 'USD'), ('GBP', 'EUR'), ('GBP', 'USD')),
                     partial(formatRatio,
                             {'GBPEUR=X': F('0.78'),
                              'EURUSD=X': F('1.2'),
                              'GBPUSD=X': F('12.2')},
                             tprefs.signif_digits,
                             tprefs.aliases,
                             tprefs.trans),
                     2,
                     '  '),
         'EUR/USD=1.200  GBP/EUR=0.780\nGBP/USD=12.20\n')
    assertEquals(
        computeColumn(('XBT', 'EUR', 'XAU'),
                      lambda sym: sym + 'x',
                      None),
        {'XBT': 'XBTx', 'EUR': 'EURx', 'XAU': 'XAUx'})
    assertEquals(
        computeColumn(('XBT', 'EUR', 'XAU'),
                      lambda sym: sym + 'x',
                      ()),
        {})
    assertEquals(
        computeColumn(('XBT', 'EUR', 'XAU'),
                      lambda sym, unit: sym + 'x' + unit,
                      ('u1', 'u2', 'u3')),
        OrderedDict((('u1', {'EUR': 'EURxu1', 'XAU': 'XAUxu1', 'XBT': 'XBTxu1'}),
                     ('u2', {'EUR': 'EURxu2', 'XAU': 'XAUxu2', 'XBT': 'XBTxu2'}),
                     ('u3', {'EUR': 'EURxu3', 'XAU': 'XAUxu3', 'XBT': 'XBTxu3'}))))
    assertEquals(
        formatCols(portfolio, prices, tprefs),
        ((('SYM',), 'XBT', 'GBP', 'XAU', 'XAG', '   ', '   '),
         (('PRICE', '  USD'), '418.9', '1.484', "1'076", '14.37', '     ', '     '),
         (('PRICE', '  EUR'), '381.7', '1.352', '980.4', '13.09', '     ', '     '),
         (('PRICE', '  GBP'), '282.3', '1.000', '725.3', '9.685', '     ', '     '),
         (('  QTY',), '13.30', "2'168", '2.900', '107.3', '     ', '     '),
         (('WEIGHT', '     g'), '      ', '      ', '    90', " 3'337", ' -----', " 3'428"),
         (('WEIGHT', '    kg'), '      ', '      ', ' 0.090', ' 3.337', ' -----', ' 3.428'),
         (('VALUE', '    %'), ' 41.4', ' 23.9', ' 23.2', ' 11.5', '-----', '100.0'),
         ((' VALUE', '   USD'), " 5'572", " 3'217", " 3'121", " 1'542", '------', "13'451"),
         ((' VALUE', '   EUR'), " 5'076", " 2'931", " 2'843", " 1'405", '------', "12'255"),
         (('VALUE', '  XBT'), '13.30', ' 7.59', ' 7.45', ' 3.68', '-----', '32.02')))
    assertEquals(
        formatPortfolio(portfolio, prices, tprefs),
        "SYM  PRICE  PRICE  PRICE    QTY  WEIGHT  WEIGHT  VALUE   VALUE   VALUE  VALUE\n" +
        "       USD    EUR    GBP              g      kg      %     USD     EUR    XBT\n" +
        "\n" +
        "XBT  418.9  381.7  282.3  13.30                   41.4   5'572   5'076  13.30\n" +
        "GBP  1.484  1.352  1.000  2'168                   23.9   3'217   2'931   7.59\n" +
        "XAU  1'076  980.4  725.3  2.900      90   0.090   23.2   3'121   2'843   7.45\n" +
        "XAG  14.37  13.09  9.685  107.3   3'337   3.337   11.5   1'542   1'405   3.68\n" +
        "                                  -----   -----  -----  ------  ------  -----\n" +
        "                                  3'428   3.428  100.0  13'451  12'255  32.02\n")
    assertEquals(
        formatAll({}, {}, (), OrderedDict(), tprefs),
        "")
    assertEquals(
        formatAll(prices, portfolio, (), OrderedDict(), tprefs),
        "SYM  PRICE  PRICE  PRICE    QTY  WEIGHT  WEIGHT  VALUE   VALUE   VALUE  VALUE\n" +
        "       USD    EUR    GBP              g      kg      %     USD     EUR    XBT\n" +
        "\n" +
        "XBT  418.9  381.7  282.3  13.30                   41.4   5'572   5'076  13.30\n" +
        "GBP  1.484  1.352  1.000  2'168                   23.9   3'217   2'931   7.59\n" +
        "XAU  1'076  980.4  725.3  2.900      90   0.090   23.2   3'121   2'843   7.45\n" +
        "XAG  14.37  13.09  9.685  107.3   3'337   3.337   11.5   1'542   1'405   3.68\n" +
        "                                  -----   -----  -----  ------  ------  -----\n" +
        "                                  3'428   3.428  100.0  13'451  12'255  32.02\n")
    assertEquals(
        formatAll(prices, {}, ratios, quotes, tprefs),
        "XAU/XAG=74.89  XBT/XAU=0.389\n" +
        "EUR/USD=1.098\n" +
        "GBTC=62.88  NYXBT=454.1\n" +
        "USDX=97.98\n")
    assertEquals(
        formatAll(prices, portfolio, ratios, quotes, tprefs),
        "XAU/XAG=74.89  XBT/XAU=0.389\n" +
        "EUR/USD=1.098\n" +
        "GBTC=62.88  NYXBT=454.1\n" +
        "USDX=97.98\n" +
        "\n" +
        "SYM  PRICE  PRICE  PRICE    QTY  WEIGHT  WEIGHT  VALUE   VALUE   VALUE  VALUE\n" +
        "       USD    EUR    GBP              g      kg      %     USD     EUR    XBT\n" +
        "\n" +
        "XBT  418.9  381.7  282.3  13.30                   41.4   5'572   5'076  13.30\n" +
        "GBP  1.484  1.352  1.000  2'168                   23.9   3'217   2'931   7.59\n" +
        "XAU  1'076  980.4  725.3  2.900      90   0.090   23.2   3'121   2'843   7.45\n" +
        "XAG  14.37  13.09  9.685  107.3   3'337   3.337   11.5   1'542   1'405   3.68\n" +
        "                                  -----   -----  -----  ------  ------  -----\n" +
        "                                  3'428   3.428  100.0  13'451  12'255  32.02\n")

######### EXECUTION STARTING POINT #########
runTests()
main ()
